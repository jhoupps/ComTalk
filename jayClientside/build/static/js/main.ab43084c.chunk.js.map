{"version":3,"sources":["Constants/PageTypes/PageTypes.js","Components/Auth/Components/SignForm/SignForm.js","Constants/APIEndpoints/APIEndpoints.js","Components/Errors/Errors.js","Components/Auth/Components/SignUp/SignUp.js","Components/Auth/Components/SignIn/SignIn.js","Components/Auth/Components/ForgotPassword/ForgotPassword.js","Components/Auth/Auth.js","Components/Main/Content/MainPageContent/MainPageContent.js","Components/Main/Components/SignOutButton/SignOutButton.js","Components/Main/Components/ViewForum/ViewForum.js","Components/Main/Components/UpdateName/UpdateName.js","Components/Main/Components/UpdateAvatar/UpdateAvatar.js","Components/Main/Components/CreateNewForum/CreateNewForum.js","Components/Main/Main.js","App.js","serviceWorker.js","index.js"],"names":["SignForm","setField","submitForm","values","fields","onSubmit","map","d","key","name","id","value","onChange","type","users","myuser","myuserAvatar","sessions","sessionsMine","resetPasscode","passwords","forum","specificForum","Errors","error","setError","className","onClick","SignUp","props","e","setState","target","a","preventDefault","state","email","userName","firstName","lastName","password","passwordConf","sendData","fetch","api","method","body","JSON","stringify","headers","Headers","response","status","text","authToken","get","localStorage","setItem","setAuthToken","json","user","setUser","this","setPage","PageTypes","Component","SignIn","ForgotPassword","sendResetCode","alert","resetCodeSent","updatePassword","resetCode","setValue","Auth","page","MainPageContent","useState","getItem","forumjson","console","log","useEffect","fetchForumList","SignOutButton","removeItem","ViewForum","CreateNewForum","submitForum","forumName","description","Main","content","contentPage","App","getCurrentUser","setPageToSignIn","setPageToSignUp","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ab43084c.chunk.js","sourcesContent":["export default {\n    signIn: \"SIGNIN\",\n    signUp: \"SIGNUP\",\n    signedInMain: \"SIGNEDIN_MAIN\",\n    signedInUpdateName: \"SIGNEDIN_UPDATENAME\",\n    signedInUpdateAvatar: \"SIGNEDIN_UPDATEAVATAR\",\n    forgotPassword: \"FORGOT_PASSWORD\",\n    //This variable needs to be created in order to use it in the MainPageContent.js for the\n    //New Forum button on the main webpage  \n    createNewForum: \"CREATE_NEW_FORUM\",\n    viewForum: \"VIEW_FORUM\" //I dont actually know what these are for yet -jay\n}","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst SignForm = ({ setField, submitForm, values, fields }) => {\n    return <>\n        <form onSubmit={submitForm}>\n            {fields.map(d => {\n                const { key, name } = d;\n                return <div key={key} id=\"form_entry\">\n                    <span>{name}: </span>\n                    <input\n                        value={values[key]}\n                        name={key}\n                        onChange={setField}\n                        type={key === \"password\" || key === \"passwordConf\" ? \"password\" : ''}\n                    />\n                </div>\n            })}\n            <input id=\"submit_button\" type=\"submit\" value=\"Submit\" />\n        </form>\n    </>\n}\n\nSignForm.propTypes = {\n    setField: PropTypes.func.isRequired,\n    submitForm: PropTypes.func.isRequired,\n    values: PropTypes.shape({\n        email: PropTypes.string.isRequired,\n        userName: PropTypes.string,\n        firstName: PropTypes.string,\n        lastName: PropTypes.string,\n        password: PropTypes.string.isRequired,\n        passwordConf: PropTypes.string\n    }),\n    fields: PropTypes.arrayOf(PropTypes.shape({\n        key: PropTypes.string,\n        name: PropTypes.string\n    }))\n}\n\nexport default SignForm;","export default {\n    base: \"https://api.comtalk.tech\",\n    testbase: \"https://localhost:4000\",\n    //testbase: \"https://api.comtalk.tech\", //gonna try running with also testing locally on the deployed api\n    handlers: {\n        users: \"/v1/Seattle/users\",\n        myuser: \"/v1/Seattle/users/me\",\n        myuserAvatar: \"/v1/Seattle/users/me/avatar\",\n        sessions: \"/v1/Seattle/sessions\",\n        sessionsMine: \"/v1/Seattle/sessions/mine\",\n        resetPasscode: \"/v1/Seattle/resetcodes\",\n        passwords: \"/v1/Seattle/passwords/\",\n        forum: \"/v1/Seattle/forum\",\n        specificForum: \"/v1/Seattle/forum/\" //maybe put a :forumID in here\n    }\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './Styles/Errors.css';\n\nconst Errors = ({ error, setError }) => {\n    switch (error) {\n        case \"\":\n            return <></>\n        default:\n            return <div className=\"error\">\n                <span className=\"error-hide\" onClick={() => setError(\"\")}>x</span>\n                Error: {error}\n            </div>\n    }\n}\n\nErrors.propTypes = {\n    error: PropTypes.string.isRequired,\n    setError: PropTypes.func\n}\n\nexport default Errors;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport SignForm from '../SignForm/SignForm';\nimport api from '../../../../Constants/APIEndpoints/APIEndpoints';\nimport Errors from '../../../Errors/Errors';\nimport PageTypes from '../../../../Constants/PageTypes/PageTypes';\n\n/**\n * @class\n * @classdesc SignUp handles the sign up component\n */\nclass SignUp extends Component {\n    static propTypes = {\n        setPage: PropTypes.func,\n        setAuthToken: PropTypes.func\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            email: \"\",\n            userName: \"\",\n            firstName: \"\",\n            lastName: \"\",\n            password: \"\",\n            passwordConf: \"\",\n            error: \"\"\n        };\n\n        this.fields = [\n            {\n                name: \"Email\",\n                key: \"email\"\n            },\n            {\n                name: \"Username\",\n                key: \"userName\"\n            },\n            {\n                name: \"First name\",\n                key: \"firstName\"\n            },\n            {\n                name: \"Last name\",\n                key: \"lastName\"\n            },\n            {\n                name: \"Password\",\n                key: \"password\"\n            },\n            {\n                name: \"Password Confirmation\",\n                key: \"passwordConf\"\n            }];\n    }\n\n    /**\n     * @description setField will set the field for the provided argument\n     */\n    setField = (e) => {\n        this.setState({ [e.target.name]: e.target.value });\n    }\n\n    /**\n     * @description setError sets the error message\n     */\n    setError = (error) => {\n        this.setState({ error })\n    }\n\n    /**\n     * @description submitForm handles the form submission\n     */\n    submitForm = async (e) => {\n        e.preventDefault();\n        const { email,\n            userName,\n            firstName,\n            lastName,\n            password,\n            passwordConf } = this.state;\n        const sendData = {\n            email,\n            userName,\n            firstName,\n            lastName,\n            password,\n            passwordConf\n        };\n        const response = await fetch(api.base + api.handlers.users, {\n            method: \"POST\",\n            body: JSON.stringify(sendData),\n            headers: new Headers({\n                \"Content-Type\": \"application/json\"\n            })\n        });\n        if (response.status >= 300) {\n            const error = await response.text();\n            this.setError(error);\n            return;\n        }\n        const authToken = response.headers.get(\"Authorization\")\n        localStorage.setItem(\"Authorization\", authToken);\n        this.setError(\"\");\n        this.props.setAuthToken(authToken);\n        const user = await response.json();\n        this.props.setUser(user);\n    }\n\n    render() {\n        const values = this.state;\n        const { error } = this.state;\n        return <>\n            <Errors error={error} setError={this.setError} />\n            <SignForm\n                setField={this.setField}\n                submitForm={this.submitForm}\n                values={values}\n                fields={this.fields} \n            />\n            <button id=\"submit_button\" onClick={(e) => this.props.setPage(e, PageTypes.signIn)}>Sign in instead</button>\n        </>\n    }\n}\n\nexport default SignUp;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport SignForm from '../SignForm/SignForm';\nimport api from '../../../../Constants/APIEndpoints/APIEndpoints';\nimport Errors from '../../../Errors/Errors';\nimport PageTypes from '../../../../Constants/PageTypes/PageTypes';\n\n/**\n * @class\n * @classdesc SignIn handles the sign in component\n */\nclass SignIn extends Component {\n    static propTypes = {\n        setPage: PropTypes.func,\n        setAuthToken: PropTypes.func\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            email: \"\",\n            password: \"\",\n            error: \"\"\n        };\n\n        this.fields = [\n            {\n                name: \"Email\",\n                key: \"email\"\n            },\n            {\n                name: \"Password\",\n                key: \"password\"\n            }];\n    }\n\n    /**\n     * @description setField will set the field for the provided argument\n     */\n    setField = (e) => {\n        this.setState({ [e.target.name]: e.target.value });\n    }\n\n    /**\n     * @description setError sets the error message\n     */\n    setError = (error) => {\n        this.setState({ error })\n    }\n\n    /**\n     * @description submitForm handles the form submission\n     */\n    submitForm = async (e) => {\n        e.preventDefault();\n        const { email, password } = this.state;\n        const sendData = { email, password };\n        const response = await fetch(api.base + api.handlers.sessions, {\n            method: \"POST\",\n            body: JSON.stringify(sendData),\n            headers: new Headers({\n                \"Content-Type\": \"application/json\"\n            })\n        });\n        if (response.status >= 300) {\n            const error = await response.text();\n            this.setError(error);\n            return;\n        }\n        const authToken = response.headers.get(\"Authorization\")\n        localStorage.setItem(\"Authorization\", authToken);\n        this.setError(\"\");\n        this.props.setAuthToken(authToken);\n        const user = await response.json();\n        this.props.setUser(user);\n    }\n\n    render() {\n        const values = this.state;\n        const { error } = this.state;\n        return <>\n            <Errors error={error} setError={this.setError} />\n            <h1>ComTalk</h1>\n            <div id=\"form_entry\">\n                <SignForm\n                    setField={this.setField}\n                    submitForm={this.submitForm}\n                    values={values}\n                    fields={this.fields} \n                />\n             </div>\n            <button id=\"sign_up\" onClick={(e) => this.props.setPage(e, PageTypes.signUp)}>Sign Up</button>\n            <button id=\"forgot_password\" onClick={(e) => this.props.setPage(e, PageTypes.forgotPassword)}>Forgot Password</button>\n            <footer>\n                <p>Andy | Jay | Rayna | Wanyu | Copyright &copy; 2020</p>\n\t        </footer>\n        </>\n    }\n}\n\nexport default SignIn;","import React, { Component } from 'react';\nimport Errors from '../../../Errors/Errors';\nimport api from '../../../../Constants/APIEndpoints/APIEndpoints';\nimport PageTypes from '../../../../Constants/PageTypes/PageTypes';\n\nclass ForgotPassword extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            email: \"\",\n            password: \"\",\n            passwordConf: \"\",\n            resetCode: \"\",\n            resetCodeSent: false,\n            error: \"\"\n        }\n    }\n\n    sendResetCode = async (e) => {\n        e.preventDefault();\n        const { email } = this.state;\n        const sendData = { email };\n        const response = await fetch(api.base + api.handlers.resetPasscode, {\n            method: \"POST\",\n            body: JSON.stringify(sendData),\n            headers: new Headers({\n                \"Content-Type\": \"application/json\"\n            })\n        });\n        if (response.status >= 300) {\n            const error = await response.text();\n            this.setError(error);\n            return;\n        }\n        this.setError(\"\");\n        alert(\"A reset code has been sent to your email\");\n        this.setState({ resetCodeSent: true });\n    }\n\n    updatePassword = async (e) => {\n        e.preventDefault();\n        const { email, password, passwordConf, resetCode } = this.state;\n        const sendData = { password, passwordConf, resetCode };\n        const response = await fetch(api.base + api.handlers.passwords + email, {\n            method: \"PUT\",\n            body: JSON.stringify(sendData),\n            headers: new Headers({\n                \"Content-Type\": \"application/json\"\n            })\n        });\n        if (response.status >= 300) {\n            const error = await response.text();\n            this.setError(error);\n            return;\n        }\n        this.setError(\"\");\n        alert(\"Your password has been updated\");\n    }\n\n    setValue = (e) => {\n        this.setState({ [e.target.name]: e.target.value });\n    }\n\n    setError = (error) => {\n        this.setState({ error });\n    }\n\n    render() {\n        const { email, password, passwordConf, resetCode, resetCodeSent, error } = this.state;\n        return <>\n            <Errors error={error} setError={this.setError} />\n            {resetCodeSent ?\n                <>\n                    <form onSubmit={(e) => this.updatePassword(e)}>\n                        <div>\n                            <span>Password: </span>\n                            <input name={\"password\"} type={\"password\"} onChange={this.setValue} value={password} />\n                        </div>\n                        <div>\n                            <span>Password Confirmation: </span>\n                            <input name={\"passwordConf\"} type={\"password\"} onChange={this.setValue} value={passwordConf} />\n                        </div>\n                        <div>\n                            <span>Reset Code: </span>\n                            <input name={\"resetCode\"} onChange={this.setValue} value={resetCode} />\n                        </div>\n                        <input type=\"submit\" value=\"Update my password\" />\n                    </form>\n                </>\n                :\n                <>\n                    <form onSubmit={(e) => this.sendResetCode(e)}>\n                        <div>\n                            <span>Email: </span>\n                            <input name={\"email\"} onChange={this.setValue} value={email} />\n                        </div>\n                        <input type=\"submit\" value=\"Send me a reset code\" />\n                    </form>\n                </>}\n            <button onClick={(e) => this.props.setPage(e, PageTypes.signIn)}>Back to sign in</button>\n\n\n        </>\n\n    }\n\n\n\n}\n\nexport default ForgotPassword;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport PageTypes from '../../Constants/PageTypes/PageTypes';\nimport SignUp from './Components/SignUp/SignUp';\nimport SignIn from './Components/SignIn/SignIn';\nimport ForgotPassword from './Components/ForgotPassword/ForgotPassword';\n\n/**\n * @class Auth\n * @description This is an auth object that controls what page\n * is loaded based on sign up or sign in state\n */\nconst Auth = ({ page, setPage, setAuthToken, setUser }) => {\n    switch (page) {\n        case PageTypes.signUp:\n            return <SignUp setPage={setPage} setAuthToken={setAuthToken} setUser={setUser} />\n        case PageTypes.signIn:\n            return <SignIn setPage={setPage} setAuthToken={setAuthToken} setUser={setUser} />\n        case PageTypes.forgotPassword:\n            return <ForgotPassword setPage={setPage} />;\n        default:\n            return <>Error, invalid path reached</>\n    }\n}\n\nAuth.propTypes = {\n    page: PropTypes.string.isRequired,\n    setPage: PropTypes.func.isRequired,\n    setAuthToken: PropTypes.func.isRequired,\n    setUser: PropTypes.func.isRequired\n}\n\nexport default Auth;","import React, { useState, useEffect } from 'react';\nimport PageTypes from '../../../../Constants/PageTypes/PageTypes';\nimport './Styles/MainPageContent.css';\nimport api from '../../../../Constants/APIEndpoints/APIEndpoints';\n\nconst MainPageContent = ({ user, setPage }) => {\n    const [avatar, setForumList] = useState(null)\n\n    //JAY INTENDS TO BE WORKING ON THIS FILE\n    async function fetchForumList() {\n        const response = await fetch(api.base + api.handlers.forum, {\n            method: \"GET\",\n            headers: new Headers({\n                \"Authorization\": localStorage.getItem(\"Authorization\")\n            })\n        });\n        if (response.status >= 300) {\n            // const error = await response.text();\n            //setForumList(user.photoURL)\n            return;\n        }\n        //WANYU - DO THINGS WITH the repsonse\n        const forumjson = await response.json();\n        console.log(forumjson);\n    }\n\n    useEffect(() => {\n        fetchForumList();\n        return;\n    }, []);\n\n    return <>\n        <main>\n\t\t\t<div>\n                <div><h2>Your Subscribed Channels</h2> </div>\n\n\n\t\t\t\t<div id=\"subscribed_channels\">\n                    There will be a list of buttons representing subscribed channels here once Jay can call endpoints\n                    <div><button onClick={(e) => { setPage(e, PageTypes.viewForum) }}>View a Forum (Broken)</button></div>\n\n                </div>\n\n                <div><button onClick={(e) => { setPage(e, PageTypes.createNewForum) }}>New Forum</button></div>\n\t\t\t</div>\n\t</main>\n    </>\n\n//THE BUTTON UP THERE IS LINKED TO THE WRONG PAGE\n    /* previous return statement\n            return <>\n        <div>Welcome to my application, {user.firstName} {user.lastName}</div>\n\n        {avatar && <img className={\"avatar\"} src={avatar} alt={`${user.firstName}'s avatar`} />}\n        <div><button onClick={(e) => { setPage(e, PageTypes.signedInUpdateName) }}>Update name</button></div>\n        <div><button onClick={(e) => { setPage(e, PageTypes.signedInUpdateAvatar) }}>Update avatar</button></div>\n    </>\n    */\n\n}\n\nexport default MainPageContent;","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport api from '../../../../Constants/APIEndpoints/APIEndpoints';\nimport Errors from '../../../Errors/Errors';\n\nconst SignOutButton = ({ setAuthToken, setUser }) => {\n    const [error, setError] = useState(\"\");\n\n    return <><button id=\"sign_out\" onClick={async (e) => {\n        e.preventDefault();\n        const response = await fetch(api.base + api.handlers.sessionsMine, {\n            method: \"DELETE\"\n        });\n        if (response.status >= 300) {\n            const error = await response.text();\n            setError(error);\n            return;\n        }\n        localStorage.removeItem(\"Authorization\");\n        setError(\"\");\n        setAuthToken(\"\");\n        setUser(null);\n    }}>Sign Out</button>\n        {error &&\n            <div>\n                <Errors error={error} setError={setError} />\n            </div>\n        }\n    </>\n}\n\nSignOutButton.propTypes = {\n    setAuthToken: PropTypes.func.isRequired,\n    setUser: PropTypes.func.isRequired\n}\n\nexport default SignOutButton;","import React, { useState, useEffect } from 'react';\nimport PageTypes from '../../../../Constants/PageTypes/PageTypes';\nimport api from '../../../../Constants/APIEndpoints/APIEndpoints';\n\n\nconst ViewForum = ({ user, setPage }) => {\n    const [avatar, setForumList] = useState(null)\n\n    //JAY INTENDS TO BE WORKING ON THIS FILE\n    //I MOSTLY JUST COPIED THIS FROM THE MAINPAGECONTENT.JS\n    async function fetchForumList() {\n        //HARDCODED 1 UNTIL I CAN PASS A VALUE VIA BUTTON\n        const response = await fetch(api.base + api.handlers.specificForum + \"1\", {\n            method: \"GET\",\n            headers: new Headers({\n                \"Authorization\": localStorage.getItem(\"Authorization\")\n            })\n        });\n        if (response.status >= 300) {\n            // const error = await response.text();\n            //setForumList(user.photoURL)\n            return;\n        }\n        const forumjson = await response.json();\n        console.log(forumjson);\n    }\n\n    useEffect(() => {\n        fetchForumList();\n        return;\n    }, []);\n\n    return <>\n        <main>\n\t\t\t<div>\n                <div><h2>Channel Name (TODO)</h2> </div>\n\t\t\t\t<div id=\"posts\">There's some posts here, it's a general forum.</div>\n\t\t\t</div>\n\t</main>\n    </>\n\n//THE BUTTON UP THERE IS LINKED TO THE WRONG PAGE\n    /* previous return statement\n            return <>\n        <div>Welcome to my application, {user.firstName} {user.lastName}</div>\n\n        {avatar && <img className={\"avatar\"} src={avatar} alt={`${user.firstName}'s avatar`} />}\n        <div><button onClick={(e) => { setPage(e, PageTypes.signedInUpdateName) }}>Update name</button></div>\n        <div><button onClick={(e) => { setPage(e, PageTypes.signedInUpdateAvatar) }}>Update avatar</button></div>\n    </>\n    */\n\n}\n\nexport default ViewForum;","import React, { Component } from 'react';\nimport api from '../../../../Constants/APIEndpoints/APIEndpoints';\nimport Errors from '../../../Errors/Errors';\n\nclass UpdateName extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            firstName: '',\n            lastName: '',\n            error: ''\n        }\n    }\n\n    sendRequest = async (e) => {\n        e.preventDefault();\n        const { firstName, lastName } = this.state;\n        const sendData = { firstName, lastName };\n        const response = await fetch(api.base + api.handlers.myuser, {\n            method: \"PATCH\",\n            body: JSON.stringify(sendData),\n            headers: new Headers({\n                \"Authorization\": localStorage.getItem(\"Authorization\"),\n                \"Content-Type\": \"application/json\"\n            })\n        });\n        if (response.status >= 300) {\n            const error = await response.text();\n            console.log(error);\n            this.setError(error);\n            return;\n        }\n        alert(\"Name changed\") // TODO make this better by refactoring errors\n        const user = await response.json();\n        this.props.setUser(user);\n    }\n\n    setValue = (e) => {\n        this.setState({ [e.target.name]: e.target.value });\n    }\n\n    setError = (error) => {\n        this.setState({ error })\n    }\n\n    render() {\n        const { firstName, lastName, error } = this.state;\n        return <>\n            <Errors error={error} setError={this.setError} />\n            <div>Enter a new name</div>\n            <form onSubmit={this.sendRequest}>\n                <div>\n                    <span>First name: </span>\n                    <input name={\"firstName\"} value={firstName} onChange={this.setValue} />\n                </div>\n                <div>\n                    <span>Last name: </span>\n                    <input name={\"lastName\"} value={lastName} onChange={this.setValue} />\n                </div>\n                <input type=\"submit\" value=\"Change name\" />\n            </form>\n        </>\n    }\n\n}\n\nexport default UpdateName;","import React, { Component } from 'react';\nimport api from '../../../../Constants/APIEndpoints/APIEndpoints';\nimport Errors from '../../../Errors/Errors';\n\nclass UpdateAvatar extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            file: null,\n            error: ''\n        }\n    }\n\n    sendRequest = async (e) => {\n        e.preventDefault();\n        const { file } = this.state;\n        let data = new FormData()\n        data.append('uploadfile', file);\n        const response = await fetch(api.base + api.handlers.myuserAvatar, {\n            method: \"PUT\",\n            body: data,\n            headers: new Headers({\n                \"Authorization\": localStorage.getItem(\"Authorization\"),\n            })\n        });\n        if (response.status >= 300) {\n            const error = await response.text();\n            console.log(error);\n            this.setError(error);\n            return;\n        }\n        alert(\"Avatar changed\"); // TODO make this better by refactoring errors\n    }\n\n    handleFile = (e) => {\n        this.setState({\n            file: e.target.files[0]\n        })\n    }\n\n    setError = (error) => {\n        this.setState({ error })\n    }\n\n    render() {\n        const { error } = this.state;\n        return <>\n            <Errors error={error} setError={this.setError} />\n            <div>Give yourself a new avatar</div>\n            <form onSubmit={this.sendRequest}>\n                <div>\n                    <span>Upload new avatar </span>\n                    <input type=\"file\" onChange={this.handleFile} />\n                </div>\n                <input type=\"submit\" value=\"Change avatar\" />\n            </form>\n        </>\n    }\n\n}\n\nexport default UpdateAvatar;","import React, { Component } from 'react';\nimport api from '../../../../Constants/APIEndpoints/APIEndpoints';\nimport Errors from '../../../Errors/Errors';\nimport PageTypes from '../../../../Constants/PageTypes/PageTypes';\n\n/**\n * @class\n * @classdesc CreateNewForum handles the creation of new forum name component\n */\n\nclass CreateNewForum extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state= {\n            forumName: '',\n            description: '',\n            error: ''\n        };\n\n        this.fields = [\n            {\n                name: \"Forum Name\",\n                key: \"forumName\"\n            },\n            {\n                name: \"Description\",\n                key: \"description\"\n            }\n        ]\n    }\n\n    /**\n     * @description setField will set the field for the provided argument\n     */\n    setField = (e) => {\n        this.setState({ [e.target.name]: e.target.value });\n    }\n\n    /**\n     * @description setError sets the error message\n     */\n    setError = (error) => {\n        this.setState({ error })\n    }\n\n    /**\n     * @description submitForm handles the form submission\n     */\n    submitForum = async (e) => {\n        e.preventDefault();\n        const { forumName, description } = this.state;         \n    \n        const sendData = { forumName, description };\n\n        const response = await fetch(api.base + api.handlers.forum, {\n            method: \"POST\",\n            body: JSON.stringify(sendData),\n            headers: new Headers({\n                \"Content-Type\": \"application/json\"\n            })\n        });\n\n        if (response.status >= 300) {\n            const error = await response.text();\n            this.setError(error);\n            return;\n        }\n        const authToken = response.headers.get(\"Authorization\")\n        localStorage.setItem(\"Authorization\", authToken);\n        this.setError(\"\");\n        this.props.setAuthToken(authToken);\n        const user = await response.json();\n        this.props.setUser(user);\n    };\n\n    render() {\n        const { forumName, description, error } = this.state;\n        return <>\n            <Errors error={error} setError={this.setError} />\n\n            <div><h2>Enter a New Forum</h2></div>\n            <br />\n            <form onSubmit={this.submitForum}>\n                <div id=\"form_entry\">\n                    <span>Forum Name: </span>\n                    <input name={\"forumName\"} value={forumName} onChange={this.setField} />\n                </div>\n                <div id=\"form_entry\">\n                    <span>Description: </span>\n                    <input name={\"description\"} value={description} onChange={this.setField} />\n                </div>\n            </form>\n            <button id=\"submit_button\" onClick={(e) => this.props.setPage(e, PageTypes.signedInMain)}>Submit</button>\n            <br />\n        </>\n    }\n\n}\n\nexport default CreateNewForum;","import React from 'react';\nimport PageTypes from '../../Constants/PageTypes/PageTypes';\nimport MainPageContent from './Content/MainPageContent/MainPageContent';\nimport SignOutButton from './Components/SignOutButton/SignOutButton';\nimport UpdateName from './Components/UpdateName/UpdateName';\nimport UpdateAvatar from './Components/UpdateAvatar/UpdateAvatar';\nimport ViewForum from './Components/ViewForum/ViewForum';\nimport CreateNewForum from './Components/CreateNewForum/CreateNewForum';\nimport './Content/MainPageContent/Styles/MainPageContent.css';\n\nconst Main = ({ page, setPage, setAuthToken, setUser, user }) => {\n    let content = <></>\n    let contentPage = true;\n    switch (page) {\n        case PageTypes.signedInMain:\n            content = <MainPageContent user={user} setPage={setPage} />;\n            break;\n        case PageTypes.signedInUpdateName:\n            //content = <UpdateName user={user} setUser={setUser} />;\n            content = <>If you're seeing this, Jay successfully removed the updateName page</>;\n            break;\n        case PageTypes.signedInUpdateAvatar:\n           // content = <UpdateAvatar user={user} setUser={setUser} />;\n            content = <>If you're seeing this, Jay successfully removed the updateAvatar page</>;\n            break;\n        case PageTypes.viewForum:\n             content = <ViewForum user={user} setUser={setUser} />;\n            //    content = <>This is a general forum, I swear!</>;\n                break;\n        case PageTypes.createNewForum:\n                 content = <CreateNewForum user={user} setPage={setUser}/>;\n                 break;\n        default:\n            content = <>Error, invalid path reached</>;\n            contentPage = false;\n            break;\n    }\n    return <>\n        <div>\n            <header>\n                <div><h1>ComTalk</h1> </div>\n\n                <div id=\"landing_title\">Hello, {user.firstName} {user.lastName}</div>\n            </header>\n        </div>\n        {content}\n        {contentPage && <button id=\"back_home\" onClick={(e) => setPage(e, PageTypes.signedInMain)}>Back to Main</button>}\n        <SignOutButton setUser={setUser} setAuthToken={setAuthToken} />\n\n        <footer>\n            <p>Andy | Jay | Rayna | Wanyu | Copyright &copy; 2020</p>\n\t    </footer>\n    </>\n}\n\nexport default Main;","import React, { Component } from 'react';\nimport Auth from './Components/Auth/Auth';\nimport PageTypes from './Constants/PageTypes/PageTypes';\nimport Main from './Components/Main/Main';\nimport './Styles/App.css';\nimport api from './Constants/APIEndpoints/APIEndpoints';\n\n\nclass App extends Component {\n    constructor() {\n        super();\n        this.state = {\n            page: localStorage.getItem(\"Authorization\") ? PageTypes.signedInMain : PageTypes.signIn,\n            authToken: localStorage.getItem(\"Authorization\") || null,\n            user: null\n        }\n\n        this.getCurrentUser()\n    }\n\n\n    /**\n     * @description Gets the users\n     */\n    getCurrentUser = async () => {\n        if (!this.state.authToken) {\n            return;\n        }\n        const response = await fetch(api.base + api.handlers.myuser, {\n            headers: new Headers({\n                \"Authorization\": this.state.authToken\n            })\n        });\n        if (response.status >= 300) {\n            alert(\"Unable to verify login. Logging out...\");\n            localStorage.setItem(\"Authorization\", \"\");\n            this.setAuthToken(\"\");\n            this.setUser(null)\n            return;\n        }\n        const user = await response.json()\n        this.setUser(user);\n\n    }\n\n    /**\n     * @description sets the page type to sign in\n     */\n    setPageToSignIn = (e) => {\n        e.preventDefault();\n        this.setState({ page: PageTypes.signIn });\n    }\n\n    /**\n     * @description sets the page type to sign up\n     */\n    setPageToSignUp = (e) => {\n        e.preventDefault();\n        this.setState({ page: PageTypes.signUp });\n    }\n\n    setPage = (e, page) => {\n        e.preventDefault();\n        this.setState({ page });\n    }\n\n    /**\n     * @description sets auth token\n     */\n    setAuthToken = (authToken) => {\n        this.setState({ authToken, page: authToken === \"\" ? PageTypes.signIn : PageTypes.signedInMain });\n    }\n\n    /**\n     * @description sets the user\n     */\n    setUser = (user) => {\n        this.setState({ user });\n    }\n\n    render() {\n        const { page, user } = this.state;\n        return (\n            <div>\n                {user ?\n                    <Main page={page}\n                        setPage={this.setPage}\n                        setAuthToken={this.setAuthToken}\n                        user={user}\n                        setUser={this.setUser} />\n                    :\n                    <Auth page={page}\n                        setPage={this.setPage}\n                        setAuthToken={this.setAuthToken}\n                        setUser={this.setUser} />\n                }\n            </div>\n        );\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}